CREATE DEFINER=`root`@`localhost` PROCEDURE `AddOrder`(IN orderTime TIMESTAMP,
	IN requiredTime TIMESTAMP, 
	IN CustomerNumber INT,
	IN ordersDetails VARCHAR(1024),
	IN commitRollback VARCHAR(8),
	INOUT maximumOrderNumber INT
)
BEGIN
	DECLARE orderAdd INT;
    DECLARE lineNum INT;
    DECLARE money FLOAT;
    DECLARE finished INTEGER DEFAULT 0;
    DECLARE pCode VARCHAR(10) DEFAULT "";
    DECLARE orders VARCHAR(1024) DEFAULT ordersDetails;
    
    
    DECLARE cur CURSOR FOR
		SELECT productCode FROM classicmodels.products WHERE FIND_IN_SET(products.productCode, orders);
	DECLARE CONTINUE HANDLER
      FOR NOT FOUND SET finished = 1;
    OPEN cur;
    
	#SET maximumOrderNumber = (SELECT max(orderNumber) FROM classicmodels.orders);
    SET orderAdd = (SELECT max(orderNumber) FROM classicmodels.orders)+1;
    
    
    INSERT INTO classicmodels.orders (orderNumber, orderDate, requiredDate, shippedDate, status, comments, customerNumber) 
							  VALUES (orderAdd, orderTime, requiredTime, NULL, 'In Process', NULL, CustomerNumber);
    
    
    SET lineNum = 1;
    details: LOOP
		SET money = FORMAT(lineNum, 2);
        FETCH cur INTO pCode;
         IF finished = 1 THEN
              LEAVE details;
         END IF;
    
    
		INSERT INTO classicmodels.orderdetails (orderNumber, productCode, orderLineNumber, quantityOrdered, priceEach) 
										VALUES (orderAdd, pCode, lineNum, lineNum, money);
		Set lineNum = lineNum+1;
	END LOOP details;
    IF commitRollback = "commit" THEN
		COMMIT;
    END IF;
    IF commitRollback = "rollback" THEN
		ROLLBACK;
    END IF;
    SET maximumOrderNumber = (SELECT max(orderNumber) FROM classicmodels.orders);
	
END